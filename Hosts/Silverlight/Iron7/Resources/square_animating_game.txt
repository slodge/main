# originally based on https://github.com/jschementi/ironruby-rubyinside-article/blob/master/ruby-squares.html
# this script uses a timer for simple animation
# there are smoother animation techniques for WP7

include System
include System::Windows
include System::Windows::Shapes
include System::Windows::Media
include System::Windows::Controls

def setup
  $speed = 21
  $canvas = Canvas.new
  Host.content_holder.children.add($canvas)
  Host.fix_orientation_portrait
  Host.start_timer("timer1", TimeSpan.from_seconds(0.05), "animate")
  new_game
end

def new_game
  add_squares(10)
end

def next_level
  $speed = $speed + 10
end

def add_squares(count)
  count.times do |i|
    my_square(15)
  end
end

def my_square(length)
  size = rand(480 / length) + 60
  left = rand(480 - size)
  top = rand(800 - size)
  speed_x = rand($speed) - $speed/2
  speed_y = rand($speed) - $speed/2
  rect = Rectangle.new
  rect.width = size
  rect.height = size
  rect.fill = rand_brush
  rect.stroke = rand_brush
  rect.stroke_thickness = rand(480 / (length * 7)) + 4
  rect.margin = Thickness.new(left,top,0,0)
  rect.tag = { "left"=>left, "top"=>top, "x"=>speed_x, "y"=>speed_y }
  Host.monitor_control(rect,rect,"square_pressed")
  $canvas.children.add(rect)
end

def test_for_next_level
  if $canvas.children.count == 0
    MessageBox.show("level complete... next level gets faster")
	next_level
	new_game
  end
end

def square_pressed
  if Calling_event == "mouse_left_button_down"
    $canvas.children.remove(Calling_sender)
	Host.vibrate(TimeSpan.from_milliseconds(10))
    test_for_next_level
  end
end
    
def brushes
  $brushes ||= %W(red orange yellow cyan blue magenta green).map do |c| 
    SolidColorBrush.new(Colors.send(c))
  end
end
    
def rand_brush
  brushes[rand(brushes.size)]
end

def animate_rect(rect)
  left = rect.tag["left"]
  top = rect.tag["top"]
  x = rect.tag["x"]
  y = rect.tag["y"]
  
  left = left + x
  if left > 480 - rect.width || left < 0
    x = -x
  end
  top = top + y
  if top > 800- rect.height || top < 0
    y = -y
  end
  rect.margin = Thickness.new(left,top,0,0)
  rect.tag = { "left"=>left, "top"=>top, "x"=>x, "y"=>y }
end
    
def animate
  $canvas.children.each { |rect|
    animate_rect(rect)
  }
end

setup
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Iron7 {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ScriptResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ScriptResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Iron7.ScriptResources", typeof(ScriptResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* CodeMirror main module
        /// *
        /// * Implements the CodeMirror constructor and prototype, which take care
        /// * of initializing the editor frame, and providing the outside interface.
        /// */
        ///
        ///// The CodeMirrorConfig object is used to specify a default
        ///// configuration. If you specify such an object before loading this
        ///// file, the values you put into it will override the defaults given
        ///// below. You can also assign to it after loading.
        ///var CodeMirrorConfig = window.CodeMirrorConfig || {};
        ///
        ///var CodeMirror = (function(){ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string codemirror_js {
            get {
                return ResourceManager.GetString("codemirror_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* The Editor object manages the content of the editable frame. It
        /// * catches events, colours nodes, and indents lines. This file also
        /// * holds some functions for transforming arbitrary DOM structures into
        /// * plain sequences of &lt;span&gt; and &lt;br&gt; elements
        /// */
        ///
        ///var internetExplorer = document.selection &amp;&amp; window.ActiveXObject &amp;&amp; /MSIE/.test(navigator.userAgent);
        ///var webkit = /AppleWebKit/.test(navigator.userAgent);
        ///var safari = /Apple Computers, Inc/.test(navigator.vendor);
        ///var gecko = /gecko\/(\d{8})/i.test(na [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string editor_js {
            get {
                return ResourceManager.GetString("editor_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///var RubyParser = Editor.Parser = (function() {
        ///  // Token types that can be considered to be atoms.
        ///  var atomicTypes = {&quot;atom&quot;: true, &quot;number&quot;: true, &quot;variable&quot;: true, &quot;string&quot;: true, &quot;regexp&quot;: true};
        ///  // Constructor for the lexical context objects.
        ///  function JSLexical(indented, column, type, align, prev, info) {
        ///    // indentation at start of this line
        ///    this.indented = indented;
        ///    // column at which this scope was opened
        ///    this.column = column;
        ///    // type of scope (&apos;vardef&apos;, &apos;stat&apos; (statement), [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string parseruby_js {
            get {
                return ResourceManager.GetString("parseruby_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .editbox {
        ///  padding: .4em;
        ///  margin: 0;
        ///  font-family: consolas, monospace;
        ///  font-size: 12pt;
        ///  line-height: 1.1em;
        ///}
        ///
        ///.editbox .rb-linenum {
        ///  padding:0.1em 1em 0.2em 0;
        ///  width:75px;
        ///}
        ///
        ///.editbox .rb-pan {
        ///  padding-bottom:0.1em;
        ///  padding-top:0.2em;
        ///}
        ///
        ///.editbox .rb-comment, .editbox .rb-long-comment {
        ///  font-style:italic;
        ///}
        ///
        ///.editbox .rb-keyword, .editbox .rb-operator {
        ///  font-weight:bold;
        ///}
        ///
        ///.editbox .rb-long-comment-whitespace {}
        ///
        ///.editbox .rb-global-variable {
        ///  color:#61 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string rubycolors_css {
            get {
                return ResourceManager.GetString("rubycolors_css", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* Functionality for finding, storing, and restoring selections
        /// *
        /// * This does not provide a generic API, just the minimal functionality
        /// * required by the CodeMirror system.
        /// */
        ///
        ///// Namespace object.
        ///var select = {};
        ///
        ///(function() {
        ///  select.ie_selection = document.selection &amp;&amp; document.selection.createRangeCollection;
        ///
        ///  // Find the &apos;top-level&apos; (defined as &apos;a direct child of the node
        ///  // passed as the top argument&apos;) node that the given node is
        ///  // contained in. Return null if the given node is not insid [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string select_js {
            get {
                return ResourceManager.GetString("select_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* String streams are the things fed to parsers (which can feed them
        /// * to a tokenizer if they want). They provide peek and next methods
        /// * for looking at the current character (next &apos;consumes&apos; this
        /// * character, peek does not), and a get method for retrieving all the
        /// * text that was consumed since the last time get was called.
        /// *
        /// * An easy mistake to make is to let a StopIteration exception finish
        /// * the token stream while there are still characters pending in the
        /// * string stream (hitting the end of the [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string stringstream_js {
            get {
                return ResourceManager.GetString("stringstream_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // A framework for simple tokenizers. Takes care of newlines and
        ///// white-space, and of getting the text from the source stream into
        ///// the token object. A state is a function of two arguments -- a
        ///// string stream and a setState function. The second can be used to
        ///// change the tokenizer&apos;s state, and can be ignored for stateless
        ///// tokenizers. This function should advance the stream over a token
        ///// and return a string or object containing information about the next
        ///// token, or null to pass and have the (n [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string tokenize_js {
            get {
                return ResourceManager.GetString("tokenize_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///var tokenizeRuby = (function() {
        ///
        ///  function buildProgress(word) {
        ///	var progress = {}, current;
        ///	  for (var i in word) {
        ///		current = progress;
        ///		for (var ch in word[i]) {
        ///		  if(!current[word[i][ch]]) current[word[i][ch]] = {};
        ///		  current = current[word[i][ch]];
        ///		}
        ///	  }
        ///	return progress;
        ///  }
        ///
        ///
        ///	function wordRegexp(words) {
        ///		return new RegExp(&quot;^(?:&quot; + words.join(&quot;|&quot;) + &quot;)$&quot;);
        ///	}
        ///	var NORMALCONTEXT = &apos;rb-normal&apos;;
        ///	var ERRORCLASS = &apos;rb-error&apos;;
        ///	var COMMENTCLASS = &apos;rb-comment&apos;;
        ///	var SYMBOLCLASS = &apos;rb-symbol [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string tokenizeruby_js {
            get {
                return ResourceManager.GetString("tokenizeruby_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        /// * Storage and control for undo information within a CodeMirror
        /// * editor. &apos;Why on earth is such a complicated mess required for
        /// * that?&apos;, I hear you ask. The goal, in implementing this, was to make
        /// * the complexity of storing and reverting undo information depend
        /// * only on the size of the edited or restored content, not on the size
        /// * of the whole document. This makes it necessary to use a kind of
        /// * &apos;diff&apos; system, which, when applied to a DOM tree, causes some
        /// * complexity and hackery.
        /// *
        /// * In sh [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string undo_js {
            get {
                return ResourceManager.GetString("undo_js", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* A few useful utility functions. */
        ///
        ///// Capture a method on an object.
        ///function method(obj, name) {
        ///  return function() {obj[name].apply(obj, arguments);};
        ///}
        ///
        ///// The value used to signal the end of a sequence in iterators.
        ///var StopIteration = {toString: function() {return &quot;StopIteration&quot;}};
        ///
        ///// Apply a function to each element in a sequence.
        ///function forEach(iter, f) {
        ///  if (iter.next) {
        ///    try {while (true) f(iter.next());}
        ///    catch (e) {if (e != StopIteration) throw e;}
        ///  }
        ///  else {
        ///    for (var i = 0 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string util_js {
            get {
                return ResourceManager.GetString("util_js", resourceCulture);
            }
        }
    }
}
